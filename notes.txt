----THOUGHTS
How can I pick better? 

Thoughts: 
I could just completely simplify and:

1. pick any truck constraints + deadline constraints
2. pick all other packages going to those places or having deliver-withs
3. if somehow this is above max_load, randomly drop enough from step 2
4. until I have max_load or above
  a. pick the nearest location left that has packages for there
  b. pick all packages going there
  c. also do deliver-with constraint check
5. again if I have above, randomly drop enough from 4 until I have 16 or very close like 13-14ish


- pick the nearest location
	- pick all its packages
- 


  If I need to/could describe 'destinations corrections' in my write-up...
"Destination corrections are received from the user of a program. This is necessary because currently neither corrected destinations nor the time by which a corrected destination will be known is part of the ‘package’ csv input file. Functionality in the cli module gathers all known destination-corrections and updates the relevant packages."

----TODO BEFORE FINISHING:
- Write and run more tests
- Test out all the docstrings! Specifically, find out if I need to insert spaces at the beginning of very multi-line comment/docstring after the first line.

----GOOD PLANNING - notes from How to Design Programs / HtDP
TIPS
	1. Keep a wish list around and as long as it's not empty, work from it
	2. One function per task
	3. Focus on the why, not how, especially in the purpose statement.
Do not pay attention to how until you need to. (Especially for recursion.)
	4. For some list processing you may want to ensure
a list is non-empty before working with it.

WISH LIST
	1. meaningful name for the function
	2. signature (consume/produce)
	3. purpose statement

SHORT DESIGN RECIPE
	1. analyze problem
	2. write what kind of data is consumed and produced, what is computed, and write a stub/signature
	3. work through examples
	4. outline the function
	5. flesh out the function
	6. test

FUNCTION DESIGN RECIPE
	1. tentative function-name and multi-line comment
	2. sentence(s) on what it's supposed to, especially in terms of data
	3. data definitions/context--what kind of data, and what it represents
	4. parameters and return statement
	5. one-line purpose
	6. improve function name
	7. delete sentence(s) from step 2
	6. generate examples as given:/expect:
	7. convert simpler examples to test(s)
	8. develop the function
	9. pass those test(s)
	10. convert more examples into tests
	11. develop the function
	12. pass those tests
	13. move the tests into a testing file and rerun them there
	14. clean up the function
---------------------------------------------------------------------------
----assoc with git commit 3a7319a
----meta note: to get the git commit, I first commit, then check the commit
----hash, then paste it in this file, then git commit --amend --no-edit
# TESTING IMPORTS
# First, test main.py itself, with this
hash_ex = Hash()
print(str(hash_ex))
# Then test imports in other modules. the below strategy is adequate:
# put the following in main.py
from tests.algorithms_tests import *
from tests.hash_tests import *
truck_test()
cli.cli_test()
algorithms_tests_test()
general_tests_test()
hash_test()
# put in truck.py
def truck_test():
    function_for_testing_imports('1')
# put in cli.py
def cli_test():
    function_for_testing_imports('2')
# put in tests/algorithms_tests
def algorithms_tests_test():
    function_for_testing_imports('3')
# put in tests/general_tests
def general_tests_test():
    function_for_testing_imports('4')
# put in package
def function_for_testing_imports(param):
    print(f"well hello there{param}")
# put in hash
def hash_test():
    hash_ex = Hash()
    print(f"called from hash_tests, here's a hash: {str(hash_ex)}")
----
---- assoc with git commit ?
