TASKS LEFT before I leave this project alone:
	1 x ensure it now works w/tests
	2 o refactor/improve my new methods/r_b functionality including comments, starting at is_deadline_urgent / 272
	including refactoring forbid_impos to return pkgs list
	also, fiddle with acceptable_increase again
	3 x slightly improve d-c to tell user to type 'no'/enter, as well as add newlines at 'it must match' and 'the exception' in the d-c instructions for locations; also delete my unneeded print statements like get_avail.. 
	4 o see if I can make it shorter, esp. at end it's taking long trips back to hub
	5 o update/verify readme AND package-version
	6 o FINISH WRITEUP
	7 o submit

OH YEAH. 
A problem I noticed erlier is my forbid_impossible
returns but that return goes nowhere, so it might 
as well not exist. which makes me wonder, do I even 
need all that? if I can easily salvage it then yes,
since code would be buggy w/o it. 
===========
TODO list
For better code but ~same functionality:

- Print functionality: there are many possibilities:
	- Say "Press Enter to continue" instead of showing it all at once!
	- Use terminal get-window size IN ORDER TO
		- get width and then replace all my carefully-manually-inserted
		newlines with (80% width) or something like that

- Hash: adjust __setitem__ to reduce count when replacing
items that themselves were Hashes (and which thus contributed
> 1 to self._count). This is not a critical bug--it would just
lead to unnecesarily large __props.

- Hash: _flatten and _deepcopy could both be made shorter

- Truck and Package: pass destination-correction time from
update_corrected_packages to Package's
update_wrong_destination_as_corrected and have that method
append a history record to indicate when the delivery-status
changed from wrong-destination to at-hub.

- Add TESTS!
	- Hash and Regex: convert tests to Python's built-in
	unittest or an actual testing module instead of my sad
	current print-statement crutches.
	- Algorithms': add automated tests route_builder and
	route_helpers
	- General: add automated tests that walk through the whole
	app from start to finish ('integration' test(s))
